name: Build - Python Docker based Service and run Sonar Checks.

on:
  workflow_call:
    inputs:
      install:
        default: ''
        required: false
        type: string
      download_merchant_ml:
        default: false
        required: false
        type: boolean
    secrets:
      helper_token:
        required: true
      sonar_token:
        required: true
      cache_aws_key_id:
        required: true
      cache_aws_key:
        required: true
      aws_key_id:
        required: true
      aws_key:
        required: true
      aws_account:
        required: true
      slack_token:
        required: true
      leela_token:
        required: true
      prod_leela_token:
        required: true
      maxmind:
        required: false

jobs:
  test_actions:
    if: |
      (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]')
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ ubuntu-22.04, test-arm ]
    name: Build, Test, Sonar, Publish
    env:
      is_reco: ${{ secrets.maxmind }}
      TERM: xterm-256color
      FORCE_COLOR: 2
      DOCKER_BUILDKIT: 1
    steps:
      - name: Getting Build-Helper Tag
        run: |
          echo "HELPER_VERSION=$(git ls-remote --tags --sort="v:refname" https://${{secrets.helper_token}}@github.com/Woosmap/build-helper.git v7.\* | awk '{print $2}' | tail -n 1)" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Docker Install
        if: contains(runner.name, 'test-arm')
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get --assume-yes install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin acl python3
          sudo usermod -aG docker $USER
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock
          python3 -m ensurepip --upgrade
      - uses: actions/checkout@v3
        with:
          repository: Woosmap/build-helper
          ref: ${{ env.HELPER_VERSION }}
          token: ${{ secrets.helper_token }}
          path: helper
          fetch-depth: 1
      - name: Login to AWS ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.aws_account }}.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.aws_key_id }}
          password: ${{ secrets.aws_key }}
      - name: Install Bender
        run: |
          pip install --extra-index-url https://pypi.fury.io/Pfii9sZDGkGXEhXEmStx/webgeoservices/ "bender==1.3.*"
      - name: Install Required Packages
        if: ${{ inputs.install }} != ''
        run: |
          sudo apt install --no-install-recommends --yes ${{ inputs.install }}
      - name: Download GeoIP (maxmind) DB (for woosmapreco)
        if: ${{ env.is_reco }}
        run: |
          ./download_geoip_database.sh
        env:
          MAXMIND: ${{ secrets.maxmind }}
      - name: Download Merchants Model
        if: ${{ inputs.download_merchant_ml }}
        run: |
          ./download_ml_job.sh
        env:
          AWS_EC2_METADATA_DISABLED: true
      - name: Bender Build
        uses: ./helper/.github/actions/builder
      - name: Bender Test
        uses: ./helper/.github/actions/run_tests
      - name: Cache code coverage
        uses: ./helper/.github/actions/cache
        with:
          path: './coverage/coverage.xml'
          key: 'coverage'
          cache_aws_key_id: ${{ secrets.cache_aws_key_id }}
          cache_aws_key: ${{ secrets.cache_aws_key }}
#      - name: SonarCloud Scan
#        if: ${{ runner.name != 'test-arm' }}
#        uses: SonarSource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.helper_token }}
#          SONAR_TOKEN: ${{ secrets.sonar_token}}
      - name: Publish
        uses: ./helper/.github/actions/publish
        with:
          leela_token: ${{ secrets.leela_token }}
      - name: PR Deploy
        uses: ./helper/.github/actions/deploy
        with:
          pr_deploy: 'true'
          leela_token: ${{ secrets.leela_token }}
